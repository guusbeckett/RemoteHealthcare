using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Customer_App
{
    public partial class Form1 : Form
    {
        private Ketler_X7_Lib.Classes.Ketler_X7 m_pKetlerX7;
        private Ketler_X7_Lib.Networking.Client m_pNetworkClient;
        private List<Ketler_X7_Lib.Objects.Value> m_pValueList;
        private Classes.Data m_pData;

        public Form1()
        {
            m_pValueList = new List<Ketler_X7_Lib.Objects.Value>();
            m_pKetlerX7 = new Ketler_X7_Lib.Classes.Ketler_X7();
            m_pNetworkClient = new Ketler_X7_Lib.Networking.Client();
            m_pData = new Classes.Data();

            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Initialize networking client
            m_pNetworkClient.connect("127.0.0.1", Ketler_X7_Lib.Classes.Global.TCPSERVER_PORT, Ketler_X7_Lib.Objects.Client.ClientFlag.CLIENTFLAG_CUSTOMERAPP);
            m_pNetworkClient.DataReceived += m_pNetworkClient_DataReceived;

            // Initialize bike
            if (!m_pKetlerX7.connect("COM14"))
            {
                Ketler_X7_Lib.Classes.GUI.throwError("Kan geen verbinding met de fiets maken!");
            }

            m_pKetlerX7.startParsingValues(1000);

            m_pKetlerX7.ValuesParsed += pKetlerX7_ValuesParsed;

            // Populate listbox with commands
            foreach (Ketler_X7_Lib.Classes.Ketler_X7.Command nCommand in Enum.GetValues(typeof(Ketler_X7_Lib.Classes.Ketler_X7.Command)))
            {
                lstCommands.Items.Add(nCommand);
            }
        }

        void m_pNetworkClient_DataReceived(object sender, Ketler_X7_Lib.Networking.Server.DataReceivedEventArgs e)
        {
            // Data from server
        }

        void pKetlerX7_ValuesParsed(object sender, Ketler_X7_Lib.Classes.Ketler_X7.ValuesParsedEventArgs e)
        {
            Ketler_X7_Lib.Classes.GUI.safelyUpdateControl(lblPulseValue, delegate
            {
                lblPulseValue.Text = e.Value.Pulse.ToString();
            });

            Ketler_X7_Lib.Classes.GUI.safelyUpdateControl(lblRPMValue, delegate
            {
                lblRPMValue.Text = e.Value.RPM.ToString();
            });

            Ketler_X7_Lib.Classes.GUI.safelyUpdateControl(lblSpeedValue, delegate
            {
                lblSpeedValue.Text = (e.Value.Speed / 10) + " km/h";
            });

            Ketler_X7_Lib.Classes.GUI.safelyUpdateControl(lblDistanceValue, delegate
            {
                lblDistanceValue.Text = ((double)e.Value.Distance / 10) + " kilometer";
            });

            Ketler_X7_Lib.Classes.GUI.safelyUpdateControl(lblReqPowerValue, delegate
            {
                lblReqPowerValue.Text = e.Value.RequestedPower.ToString();
            });

            Ketler_X7_Lib.Classes.GUI.safelyUpdateControl(lblActPowerValue, delegate
            {
                lblActPowerValue.Text = e.Value.ActualPower.ToString();
            });

            Ketler_X7_Lib.Classes.GUI.safelyUpdateControl(lblEnergyValue, delegate
            {
                lblEnergyValue.Text = e.Value.Energy + " Kj";
            });

            Ketler_X7_Lib.Classes.GUI.safelyUpdateControl(lblTimeValue, delegate
            {
                lblTimeValue.Text = e.Value.Time.ToString();
            });

            /*m_pNetworkClient.routeToServer(new Ketler_X7_Lib.Objects.Packet()
            {
                Flag = Ketler_X7_Lib.Objects.Packet.PacketFlag.PACKETFLAG_VALUES,
                Data = e.Value
            });*/
        }
        
        /// <summary>
        /// When this form is closed
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            m_pKetlerX7.onClose();
        }

        /// <summary>
        /// When the user wants to send a command to the bike
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSendCommand_Click(object sender, EventArgs e)
        {
            if (lstCommands.SelectedItem == null || !(lstCommands.SelectedItem is Ketler_X7_Lib.Classes.Ketler_X7.Command))
            {
                Ketler_X7_Lib.Classes.GUI.throwError("Incorrecte waarde geselecteerd!");
                return;
            }

            Ketler_X7_Lib.Classes.Ketler_X7.Command nCommand = (Ketler_X7_Lib.Classes.Ketler_X7.Command)lstCommands.SelectedItem;

            if (nCommand.ToString().StartsWith("CHANGE") && txtCommand.TextLength == 0)
            {
                Ketler_X7_Lib.Classes.GUI.throwError("Geen waarde opgegeven, dit commando vereist een waarde!");
                return;
            }

            // If there is a return value, we should display it
            if (nCommand.ToString().StartsWith("RETURN"))
            {
                System.Diagnostics.Debug.WriteLine(m_pKetlerX7.sendReturnCommand(nCommand, (txtCommand.TextLength == 0 ? null : txtCommand.Text)));
                return;   
            }

            if (!m_pKetlerX7.sendCommand(nCommand, (txtCommand.TextLength == 0 ? null : txtCommand.Text)))
            {
                Ketler_X7_Lib.Classes.GUI.throwError("Kon commando niet verzenden!");
            }
        }

        private void saveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            m_pData.sendData();
        }
    }
}
